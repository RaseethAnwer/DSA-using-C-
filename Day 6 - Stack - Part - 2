CODE 1 
#include<iostream>
using namespace std;

string val[100];
int op[100];


int p1=-1, p2=-1;

void push1(string num) {
    val[++p1] = num;
}

void push2(char o) {
    op[++p2] = o;
}

void pop1() {
    --p1;
}

void pop2() {
    --p2;
}

int prece(char o) {
    if (o == '+' || o == '-') return 1;
    else if (o == '*' || o == '/') return 2;
    else return 0;
}

int main() {
    string a;
    getline(cin, a);

    for (int i = 0; i < a.length(); i++) {
        if (a[i] == '(') {
            push2(a[i]);
        } else if (a[i] == ')') {
            while (op[p2] != '(') {
                char o = op[p2];
                pop2();
                string v2 = val[p1];
                pop1();
                string v1 = val[p1];
                pop1();
                push1(v1 + v2 + o);
            }
            pop2(); 
        } else if (a[i] == '+' || a[i] == '-' || a[i] == '*' || a[i] == '/') {
            while (p2 >= 0 && op[p2] != '(' && prece(a[i]) <= prece(op[p2])) {
                char o = op[p2];
                pop2();
                string v2 = val[p1];
                pop1();
                string v1 = val[p1];
                pop1();
                push1(v1 + v2 + o);
            }
            push2(a[i]);
        } else if(a[i] != ' ') {
            push1(string(1, a[i])); 
        }
    }

    while (p2 != -1) {
        char o = op[p2];
        pop2();
        string v2 = val[p1];
        pop1();
        string v1 = val[p1];
        pop1();
        push1(v1 + v2 + o);
    }
    cout << val[p1];
    return 0;
}

Input
a + b * c

Output
abc*+

_______________________________________________________________________________________________________
CODE 2
#include<iostream>
using namespace std;

int value[100];
char oper[100];

int top1=-1, top2=-1;

void pushval(int num) {
    value[++top1] = num;
}

void pushoper(char o) {
    oper[++top2] = o;
}

void popval() {
    --top1;
}

void popoper() {
    --top2;
}

int operation(int v1, int v2, char o) {
    if (o == '+') return v1 + v2;
    else if (o == '-') return v1 - v2;
    else if (o == '*') return v1 * v2;
    else if (o == '/') return v1 / v2;
    return 0;
}

int prece(char o) {
    if (o == '+' || o == '-') return 1;
    else if (o == '*' || o == '/') return 2;
    else return 0;
}

int main() {
    string a;
    getline(cin, a);

    for (int i = 0; i < a.length(); i++) {
        if (a[i] == '(') {
            pushoper(a[i]);
        } else if (a[i] == ')') {
            while (oper[top2] != '(') {
                char o = oper[top2];
                popoper();
                int v2 = value[top1];
                popval();
                int v1 = value[top1];
                popval();
                
                int v = operation(v1, v2, o);
                pushval(v);
            }
            popoper(); // Pop '('
        } else if (a[i] == '+' || a[i] == '-' || a[i] == '*' || a[i] == '/') {
            while (top2 >= 0 && oper[top2] != '(' && prece(a[i]) <= prece(oper[top2])) {
                char o = oper[top2];
                popoper();
                int v2 = value[top1];
                popval();
                int v1 = value[top1];
                popval();
                
                int v = operation(v1, v2, o);
                pushval(v);
            }
            pushoper(a[i]);
        } else if (isdigit(a[i])) {
            int num = a[i] - '0';
            
            pushval(num);
        }
    }

    while (top2 != -1) {
        char o = oper[top2];
        popoper();
        int v2 = value[top1];
        popval();
        int v1 = value[top1];
        popval();
                
        int v = operation(v1, v2, o);
        pushval(v);
    }

    cout << value[top1];
    return 0;
}

Input
34+

Output
7
_______________________________________________________________________________________________________
CODE 3
#include<iostream>
using namespace std;

class Stack{
    private:
        int n;
        int peek;
        char arr[1000];
    public:
        Stack(int num){
            n = num;
            peek = -1;
            arr[n];
        }
        
        bool isFull(){
            return (peek == n-1);
        }
        
        bool isEmpty(){
            return (peek == -1);
        }
        
        void push(char charac){
            if(isFull()){
                cout << "Stack Overflow";
                return ;
            }
            peek++;
            arr[peek] = charac;
        }
        
        void pop(){
            if(isEmpty()){
                cout << "Stack Underflow";
                return;
            }
            arr[peek--];
        }
        char peekEl(){
            if(isEmpty()){
                cout << "Stack Underflow";
                return '0';
            }
            return arr[peek];
        }
};

int main(){
    string a;
    cin >> a;
    int n = a.length();
    Stack stack(n);
    for(int i=1;i<n-1;i++){
        if(stack.isEmpty() || a[i] == '('){
            stack.push(a[i]);
        }else if(stack.peekEl() == '(' && a[i] == ')'){
            stack.pop();
        }
    }
    
    if(stack.isEmpty()){
        cout << "Parentheses are balanced.";
    }else{
        cout << "Parentheses are not balanced.";
    }
}

Input
"((()))"

Output
Parentheses are balanced.

____________________________________________________________________________________________________

CODE 4
#include<iostream>
using namespace std;

class Stack{
    private:
        int n;
        int peek;
        char arr[1000];
    public:
        Stack(int num){
            n = num;
            peek = -1;
            arr[n];
        }
        
        bool isFull(){
            return (peek == n-1);
        }
        
        bool isEmpty(){
            return (peek == -1);
        }
        
        void push(char charac){
            if(isFull()){
                cout << "Stack Overflow";
                return ;
            }
            peek++;
            arr[peek] = charac;
        }
        
        void pop(){
            if(isEmpty()){
                cout << "Stack Underflow";
                return;
            }
            cout << arr[peek--];
        }
        
};

int main(){
    string a;
    cin >> a;
    
    int n = a.length();
    Stack stack(n);
    for(int i=0;i<n;i++){
        stack.push(a[i]);
    }
    for(int i=0;i<n;i++){
        stack.pop();
    }
}

Input
apple

Output
elppa
______________________________________________________________________________________________________

CODE 5
#include<iostream>
using namespace std;

class Stack{
    private:
    int arr[100];
    int top;
    
    public :
    Stack(){
        top = -1;
    }
    
    void convertBinary(int n){
        if(n<0){
            cout<<"Invalid input: Input should be non-negative.";
            return;
        }
        while(n!=0){
            arr[++top] = n % 2;
            n = n / 2;
        }
    }
    
    void display(int n){
        while(top != -1){
            cout<<arr[top--];
        }
    }
};


int main(){
    int n;
   if(cin>>n){
    
    Stack stack;
    stack.convertBinary(n);
    stack.display(n);
   }
   else{
       cout<<"Invalid input: Please enter a valid non-negative integer.";
       return 0;
   }
}

Input
25

Output
11001

______________________________________________________________________________________________________________________
CODE 6 
#include<iostream>
using namespace std;

string val[100];
int op[100];


int p1=-1, p2=-1;

void push1(string num) {
    val[++p1] = num;
}

void push2(char o) {
    op[++p2] = o;
}

void pop1() {
    --p1;
}

void pop2() {
    --p2;
}

int prece(char o) {
    if (o == '+' || o == '-') return 1;
    else if (o == '*' || o == '/') return 2;
    else return 0;
}

int main() {
    string a;
    getline(cin, a);

    for (int i = 0; i < a.length(); i++) {
        if (a[i] == '(') {
            push2(a[i]);
        } else if (a[i] == ')') {
            while (op[p2] != '(') {
                char o = op[p2];
                pop2();
                string v2 = val[p1];
                pop1();
                string v1 = val[p1];
                pop1();
                push1(o + v1 + v2);
            }
            pop2(); // Pop '('
        } else if (a[i] == '+' || a[i] == '-' || a[i] == '*' || a[i] == '/') {
            while (p2 >= 0 && op[p2] != '(' && prece(a[i]) <= prece(op[p2])) {
                char o = op[p2];
                pop2();
                string v2 = val[p1];
                pop1();
                string v1 = val[p1];
                pop1();
                push1(o + v1 + v2);
            }
            push2(a[i]);
        } else if(isdigit(a[i])) {
            push1(string(1, a[i])); // Convert character to string before pushing
        }else{
            cout<<"Invalid input";
            return 0;
        }
    }

    while (p2 != -1) {
        char o = op[p2];
        pop2();
        string v2 = val[p1];
        pop1();
        string v1 = val[p1];
        pop1();
        push1(o + v1 + v2);
    }
    cout << val[p1];
    return 0;
}

Input
2+3*(4-1)

Output
+2*3-41

_
